[
  {
    "line": 16,
    "content": "insights_group_instructions = weave.ref('insights_group_instructions').get().content",
    "ref_name": "insights_group_instructions",
    "prompt_content": "Your team is asked to find insights based on the data (you are only concerned with the first task). Note the following roles in your team:\n\n1. The python analyst should be asked whenever code needs to be generated. The python analyst should be driving the conversation since it generates code. It should create all the information needed for the insight before the insight is stored.\n2. The research analyst should be asked for a direction, especially when stuck\n3. The insights analyst creates and stores insights, it does not write code. The insights analyst should only run after the python analyst gets working code for the okr, reach metrics, and insights metrics and prints them without errors.\n4. The behavioral analyst helps the other analysts understand the website visual elements if needed.\n\nFocus in creating insights around OKRs that are more easily tracking like page navigations, clicking an element, page durations, scroll depth, etc. Make sure an insight around one of these OKRs is found that is a problem or opportunity from user behavior. Look for insights with high impact and reach.\nDo not track OKRs like revenue or purchase if there is little data available. If stuck of finding what to track, ask the research analyst for a potential direction.\nIMPORTANT: The insight must be element specific, it cannot be an insight on the tracking configuration since we will not update tracking, only find problems or opportunities with elements or sections on pages.\n\nA valid insight should have the following:\n1. The python code calculation of the current value of the OKR the insight is about\n2. The python code calculation of the target value of the OKR the insight is about (or a benchmark, but this is less preferable). The goal must be a number based off another segment or benchmark and there must be a reason why this goal makes sense.\n3. The python code calculation of the reach of the insight (eg fraction of audience it affects)\n4. Python code calculations for all values in the insight\n\nHere is the plan to get the insight:\n1. Research analyst plans for a direction to pursue\n2. Behavioral analyst identifies interesting pages and xpaths with problems or opportunities\n3. Python analyst runs queries to get current OKR, expected OKR, reach, problem / opportunity\n4. Repeat steps 1-3 until python analyst correctly prints nonzero values for current OKR, expected OKR, reach, problem / opportunity\n5. Insight analyst runs store_insight using the python code including the print statements\n6. If storing insight fails, go back to step 1, return to any step 1-3. Please specify which step you are returning to and who should respond next.\n7. If store_insight succeeds according to the insights analyst, you may finish the task.\n\nIMPORTANT: Your task is not complete until the insights analyst explicitly states the insight is stored with the timestamp of storage. If no timestamp is not provided, then it is not stored.",
    "file": "backend/agents/data_analyst_group/prompts/society_instructions.py"
  },
  {
    "line": 18,
    "content": "suggestions_group_instructions = weave.ref('suggestions_group_instructions').get().content",
    "ref_name": "suggestions_group_instructions",
    "prompt_content": "For stored suggestions, return all of them with their numeric timestamps.\nIf there is no timestamp, assume, the suggestion is not stored. \nIf suggestions are not stored, explain why.\n\nHere is the plan to get suggestions:\n1. UX researcher finds similar experiments and UX principles around the insight\n2. Behavioral analyst finds relevant session recordings and heatmaps to better understand the problem / opportunity in the insight\n3. Suggestions Analyst creates and stores suggestion\n4. Repeat steps 1-3 until 1 - 3 good suggestions are stored.\n\nIMPORTANT: Your task is not complete until the suggestions analyst explicitly states the suggestion is stored with the timestamp of storage. If no timestamp is not provided, then it is not stored.",
    "file": "backend/agents/data_analyst_group/prompts/society_instructions.py"
  },
  {
    "line": 20,
    "content": "guardrails_group_instructions = weave.ref('guardrails_group_instructions').get().content",
    "ref_name": "guardrails_group_instructions",
    "prompt_content": "For every suggestion, answer if the guardrails verifies it meets the business guardrails criteria",
    "file": "backend/agents/data_analyst_group/prompts/society_instructions.py"
  },
  {
    "line": 22,
    "content": "coding_group_instructions = weave.ref('coding_group_instructions').get().content",
    "ref_name": "coding_group_instructions",
    "prompt_content": "Your team is asked to implement the code for the suggestion provided. \nNote the website developer can implement only 1 suggestion at a time, so 1 suggestion should be chosen.\n\nIMPORTANT: Your task is not complete until the website developer explicitly states the code url is stored with the timestamp of storage. If no timestamp is not provided, then it is not stored.",
    "file": "backend/agents/data_analyst_group/prompts/society_instructions.py"
  },
  {
    "line": 38,
    "content": "okr_store_group_instructions = weave.ref('okr_store_group_instructions').get().content",
    "ref_name": "okr_store_group_instructions",
    "prompt_content": "Properly store the OKRs with their code",
    "file": "backend/agents/data_analyst_group/prompts/society_instructions.py"
  },
  {
    "line": 40,
    "content": "suggestions_analyst_group_instructions = weave.ref('suggestions_analyst_group_instructions').get().content",
    "ref_name": "suggestions_analyst_group_instructions",
    "prompt_content": "For stored suggestions, return all of them with their numeric timestamps.\nIf there is no timestamp, assume, the suggestion is not stored. \nIf suggestions are not stored, explain why.\n\nHere is the plan to get suggestions:\n1. UX researcher finds similar experiments and UX principles around the insight\n2. Behavioral analyst finds relevent session recordings and heatmaps to better understand the problem / opportunity in the insight\n3. Suggestions Analyst creates and stores suggestion\n4. Repeat steps 1-3 until a good suggestion is stored.",
    "file": "backend/agents/data_analyst_group/prompts/society_instructions.py"
  },
  {
    "line": 42,
    "content": "okr_python_group_instructions = weave.ref('okr_python_group_instructions').get().content",
    "ref_name": "okr_python_group_instructions",
    "prompt_content": "TASK: Create and execute working python code to find function code that returns the OKRs\nDo not make any assumptions, step by step dive deep into the data by querying for top urls and top xPaths on each url.\n                                    \nFor each OKR, the output should be a function with parameters start_date and end_date with the analysis code inside to calculate the metrics per day (calculate_metrics), and return an object with the metric outputs.",
    "file": "backend/agents/data_analyst_group/prompts/society_instructions.py"
  },
  {
    "line": 44,
    "content": "python_group_instructions = weave.ref('python_group_instructions').get().content",
    "ref_name": "python_group_instructions",
    "prompt_content": "TASK: Create and execute working python code to find an insight by printing nonzero reach, okr_current, and okr_goal traceable from the tables. Do not make any assumptions, step by step dive deep into the data by querying for top urls and top xPaths on each url. Use data from the past week.",
    "file": "backend/agents/data_analyst_group/prompts/society_instructions.py"
  }
]